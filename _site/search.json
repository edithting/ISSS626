[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS626",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "pacman::p_load(sf, terra, spatstat, tmap, rvest, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#chapter-05",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#chapter-05",
    "title": "Hands-on Exercise 2",
    "section": "Chapter 05",
    "text": "Chapter 05\n\nImporting spatial data\n\nlibrary(sf)\nlibrary(tmap)\nlibrary(spatstat)\n\nlibrary(dplyr)\n\n# Childcare centres (point data)\nchildcare_sf &lt;- st_read(\"data/ChildCareServices.kml\")\n\nReading layer `CHILDCARE' from data source \n  `D:\\edithting\\ISSS626v1\\Hands-on_Ex\\Hands-on_Ex02\\data\\ChildCareServices.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n# URA Master Plan 2019 Subzone Boundary (No Sea) (polygon data)\nmpsz_sf &lt;- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `D:\\edithting\\ISSS626v1\\Hands-on_Ex\\Hands-on_Ex02\\data\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\nsummary(childcare_sf)\n\n     Name           Description                 geometry   \n Length:1925        Length:1925        POINT Z      :1925  \n Class :character   Class :character   epsg:4326    :   0  \n Mode  :character   Mode  :character   +proj=long...:   0  \n\nsummary(mpsz_sf)\n\n     Name           Description                 geometry  \n Length:332         Length:332         MULTIPOLYGON :332  \n Class :character   Class :character   epsg:4326    :  0  \n Mode  :character   Mode  :character   +proj=long...:  0  \n\n\n\n\nVisualizing Data Layers\n\ntmap_mode('view')\n\nℹ tmap mode set to \"view\".\n\ntm_shape(childcare_sf) + tm_dots()\n\n\n\n\ntmap_mode('plot')\n\nℹ tmap mode set to \"plot\".\n\n\n\n\n\nHandling Duplicate Points\n\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\nmultiplicity(childcare_ppp)\n\n   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [852] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [889] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [926] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [963] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1037] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1074] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1148] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1296] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1518] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1555] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1592] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1629] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1666] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1703] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1740] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1777] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1814] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1851] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1888] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1925] 1\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 0\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, retry = TRUE, nsim = 1, drop = TRUE)\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\n\nG-Function\n\nChoa Chu Kang\n\nG_CK &lt;- Gest(ck_km, correction = \"border\")\nplot(G_CK)\n\n\n\n\n\n\n\nG_CK.csr &lt;- envelope(ck_km, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\nplot(G_CK.csr)\n\n\n\n\n\n\n\n\n\n\nTampines\n\nG_tm &lt;- Gest(tm_km, correction = \"best\")\nplot(G_tm)\n\n\n\n\n\n\n\nG_tm.csr &lt;- envelope(tm_km, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\nplot(G_tm.csr)\n\n\n\n\n\n\n\n\n\n\n\nF-Function\n\nChoa Chu Kang\n\nF_CK &lt;- Fest(ck_km)\nplot(F_CK)\n\n\n\n\n\n\n\nF_CK.csr &lt;- envelope(ck_km, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\nplot(F_CK.csr)\n\n\n\n\n\n\n\n\n\n\nTampines\n\nF_tm &lt;- Fest(tm_km, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\n\n\nF_tm.csr &lt;- envelope(tm_km, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\nplot(F_tm.csr)\n\n\n\n\n\n\n\n\n\n\n\nK-Function\n\nChoa Chu Kang\n\nK_ck &lt;- Kest(ck_km, correction = \"Ripley\")\nplot(K_ck, . - r ~ r)\n\n\n\n\n\n\n\nK_ck.csr &lt;- envelope(ck_km, Kest, nsim = 99, rank = 1, glocal = TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(K_ck.csr, . - r ~ r)\n\n\n\n\n\n\n\n\n\n\nTampines\n\nK_tm &lt;- Kest(tm_km, correction = \"Ripley\")\nplot(K_tm, . - r ~ r, xlim = c(0,1000))\n\n\n\n\n\n\n\nK_tm.csr &lt;- envelope(tm_km, Kest, nsim = 99, rank = 1, glocal = TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(K_tm.csr, . - r ~ r, xlim = c(0,500))\n\n\n\n\n\n\n\n\nError in UseMethod(\"distmap\") : \n  no applicable method for 'distmap' applied to an object of class \"im\"\n\n\n\n\n\nL-Function\n\nChoa Chu Kang\n\nL_ck &lt;- Lest(ck_km, correction = \"Ripley\")\nplot(L_ck, . - r ~ r)\n\n\n\n\n\n\n\nL_ck.csr &lt;- envelope(ck_km, Lest, nsim = 99, rank = 1, glocal = TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(L_ck.csr, . - r ~ r)\n\n\n\n\n\n\n\n\n\n\nTampines\n\nL_tm &lt;- Lest(tm_km, correction = \"Ripley\")\nplot(L_tm, . - r ~ r, xlim = c(0,1000))\n\n\n\n\n\n\n\nL_tm.csr &lt;- envelope(tm_km, Lest, nsim = 99, rank = 1, glocal = TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(L_tm.csr, . - r ~ r, xlim = c(0,500))\n\n\n\n\n\n\n\n\nError in UseMethod(\"distmap\") : \n  no applicable method for 'distmap' applied to an object of class \"im\""
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03a.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03a.html",
    "title": "In-class Exercise 3: Interactive K-function",
    "section": "",
    "text": "pacman::p_load(sf, terra, spatstat, \n               tmap, rvest, tidyverse,\n               ggthemes, plotly)\nchildcare_sf &lt;- read_rds(\"data/rds/childcare_sf.rds\")\nchildcare_ppp &lt;- as.ppp(childcare_sf) %&gt;%\n  rjitter(retry = TRUE,\n          nsim = 1,\n          drop = TRUE)\npg &lt;- mpsz_cl %&gt;%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_cl %&gt;%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_cl %&gt;%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_cl %&gt;%\n  filter(PLN_AREA_N == \"JURONG WEST\")\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\nchildcare_pg_ppp = childcare_ppp[pg_owin]\nchildcare_tm_ppp = childcare_ppp[tm_owin]\nchildcare_ck_ppp = childcare_ppp[ck_owin]\nchildcare_jw_ppp = childcare_ppp[jw_owin]"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03a.html#building-an-interative-plot-with-ggplotly",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03a.html#building-an-interative-plot-with-ggplotly",
    "title": "In-class Exercise 3: Interactive K-function",
    "section": "Building an interative plot with ggplotly",
    "text": "Building an interative plot with ggplotly\nThe previous code chunks uses plot() to visualise the envelopes of the second-order summary statistics (such as L-function). The output is a static plot, therefore it can be difficult to make accurate guesstimates of the statistics and the corresponding distance, r.\nThe below code chunk converts the output (which is in a list form) into a dataframe, which can be used to generate a similar plot using appropriate aesthetic mappings from ggplot package. Finally, ggplotly() is used to convert the ggplot into an interactive plotly visualisation.\nThe codes were referenced from a R-blogger article. Further modifications were made to enhance the user experience by customizing the tooltips for greater clarity and intuition.\n\ntitle &lt;- \"Pairwise Distance: L function\"\n\nLcsr_df &lt;- as.data.frame(L_tm.csr)\n\ncolour=c(\"#0D657D\",\"#ee770d\",\"#D3D3D3\")\ncsr_plot &lt;- ggplot(Lcsr_df, aes(r, obs-r))+\n  # plot observed value\n  geom_line(colour=c(\"#4d4d4d\"))+\n  geom_line(aes(r,theo-r), colour=\"red\", linetype = \"dashed\")+\n  # plot simulation envelopes\n  geom_ribbon(aes(ymin=lo-r,ymax=hi-r),alpha=0.1, colour=c(\"#91bfdb\")) +\n  xlab(\"Distance r (m)\") +\n  ylab(\"L(r)-r\") +\n  geom_rug(data=Lcsr_df[Lcsr_df$obs &gt; Lcsr_df$hi,], sides=\"b\", colour=colour[1])  +\n  geom_rug(data=Lcsr_df[Lcsr_df$obs &lt; Lcsr_df$lo,], sides=\"b\", colour=colour[2]) +\n  geom_rug(data=Lcsr_df[Lcsr_df$obs &gt;= Lcsr_df$lo & Lcsr_df$obs &lt;= Lcsr_df$hi,], sides=\"b\", color=colour[3]) +\n  theme_tufte()+\n  ggtitle(title)\n\ntext1&lt;-\"Significant clustering\"\ntext2&lt;-\"Significant segregation\"\ntext3&lt;-\"Not significant clustering/segregation\"\n\n# the below conditional statement is required to ensure that the labels (text1/2/3) are assigned to the correct traces\nif (nrow(Lcsr_df[Lcsr_df$obs &gt; Lcsr_df$hi,])==0){ \n  if (nrow(Lcsr_df[Lcsr_df$obs &lt; Lcsr_df$lo,])==0){ \n    ggplotly(csr_plot, dynamicTicks=T) %&gt;%\n      style(text = text3, traces = 4) %&gt;%\n      rangeslider() \n  }else if (nrow(Lcsr_df[Lcsr_df$obs &gt;= Lcsr_df$lo & Lcsr_df$obs &lt;= Lcsr_df$hi,])==0){ \n    ggplotly(csr_plot, dynamicTicks=T) %&gt;%\n      style(text = text2, traces = 4) %&gt;%\n      rangeslider() \n  }else {\n    ggplotly(csr_plot, dynamicTicks=T) %&gt;%\n      style(text = text2, traces = 4) %&gt;%\n      style(text = text3, traces = 5) %&gt;%\n      rangeslider() \n  }\n} else if (nrow(Lcsr_df[Lcsr_df$obs &lt; Lcsr_df$lo,])==0){\n  if (nrow(Lcsr_df[Lcsr_df$obs &gt;= Lcsr_df$lo & Lcsr_df$obs &lt;= Lcsr_df$hi,])==0){\n    ggplotly(csr_plot, dynamicTicks=T) %&gt;%\n      style(text = text1, traces = 4) %&gt;%\n      rangeslider() \n  } else{\n    ggplotly(csr_plot, dynamicTicks=T) %&gt;%\n      style(text = text1, traces = 4) %&gt;%\n      style(text = text3, traces = 5) %&gt;%\n      rangeslider()\n  }\n} else{\n  ggplotly(csr_plot, dynamicTicks=T) %&gt;%\n    style(text = text1, traces = 4) %&gt;%\n    style(text = text2, traces = 5) %&gt;%\n    style(text = text3, traces = 6) %&gt;%\n    rangeslider()\n  }\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe main features of the above visualisation:\n\nThe observed and theoretical values of L(r)-r (including the upper and lower curves of the simulated envelope) can be found in the tooltip upon hovering the cursor over the geometry layers.\nThe range slider below the plot enables users to pan and zoom in to a specific range of distance.\nThe colored bands at the bottom of the line graph gives a clearer indication of significant or insignificant spatial segregation/ clustering at distance r. Dark green bands indicate significant clustering, orange indicate significant segregation, while grey indicates insignificant clustering/segregation.\nTooltips were added to provide color legend information."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "# Set CRAN mirror first\noptions(repos = c(CRAN = \"https://cran.r-project.org\"))\n\ninstall.packages(c(\"sf\", \"tmap\", \"tidyverse\", \"ggplot2\", \"ggspatial\", \n                  \"leaflet\", \"sp\", \"raster\", \"spdep\", \"htmlwidgets\"))\n\npackage 'sf' successfully unpacked and MD5 sums checked\npackage 'tmap' successfully unpacked and MD5 sums checked\npackage 'tidyverse' successfully unpacked and MD5 sums checked\npackage 'ggplot2' successfully unpacked and MD5 sums checked\npackage 'ggspatial' successfully unpacked and MD5 sums checked\npackage 'leaflet' successfully unpacked and MD5 sums checked\npackage 'sp' successfully unpacked and MD5 sums checked\npackage 'raster' successfully unpacked and MD5 sums checked\npackage 'spdep' successfully unpacked and MD5 sums checked\npackage 'htmlwidgets' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Yiwen Ding\\AppData\\Local\\Temp\\RtmpAZ9IAz\\downloaded_packages\n\n\n\n# Load required packages\nlibrary(sf)\nlibrary(tmap)\nlibrary(tidyverse)\nlibrary(leaflet)\n\n# 1. LOADING AND EXPLORING DATA\n# Load shapefile from data/geospatial\nshp_file &lt;- st_read(\"data/geospatial/Hunan.shp\")\n\nReading layer `Hunan' from data source \n  `D:\\edithting\\ISSS626\\Hands-on_Ex\\Hands-on_Ex04\\data\\geospatial\\Hunan.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n# Load CSV file from data/aspatial\ncsv_data &lt;- read.csv(\"data/aspatial/Hunan_2012.csv\")\n\n# 2. EXPLORE DATA STRUCTURE\ncat(\"=== SHAPEFILE INFORMATION ===\\n\")\n\n=== SHAPEFILE INFORMATION ===\n\nprint(shp_file)\n\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3 Shape_Leng Shape_Area    County\n1   Changde 21098   Anxiang      County   1.869074 0.10056190   Anxiang\n2   Changde 21100   Hanshou      County   2.360691 0.19978745   Hanshou\n3   Changde 21101    Jinshi County City   1.425620 0.05302413    Jinshi\n4   Changde 21102        Li      County   3.474325 0.18908121        Li\n5   Changde 21103     Linli      County   2.289506 0.11450357     Linli\n6   Changde 21104    Shimen      County   4.171918 0.37194707    Shimen\n7  Changsha 21109   Liuyang County City   4.060579 0.46016789   Liuyang\n8  Changsha 21110 Ningxiang      County   3.323754 0.26614198 Ningxiang\n9  Changsha 21111 Wangcheng      County   2.292093 0.13049161 Wangcheng\n10 Chenzhou 21112     Anren      County   2.240739 0.13343936     Anren\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\ncat(\"\\nShapefile column names:\\n\")\n\n\nShapefile column names:\n\nprint(names(shp_file))\n\n[1] \"NAME_2\"     \"ID_3\"       \"NAME_3\"     \"ENGTYPE_3\"  \"Shape_Leng\"\n[6] \"Shape_Area\" \"County\"     \"geometry\"  \n\ncat(\"\\nFirst few rows of shapefile:\\n\")\n\n\nFirst few rows of shapefile:\n\nprint(head(shp_file))\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi\n4 Changde 21102      Li      County   3.474325 0.18908121      Li\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\ncat(\"\\n=== CSV DATA INFORMATION ===\\n\")\n\n\n=== CSV DATA INFORMATION ===\n\ncat(\"CSV column names:\\n\")\n\nCSV column names:\n\nprint(names(csv_data))\n\n [1] \"County\"      \"City\"        \"avg_wage\"    \"deposite\"    \"FAI\"        \n [6] \"Gov_Rev\"     \"Gov_Exp\"     \"GDP\"         \"GDPPC\"       \"GIO\"        \n[11] \"Loan\"        \"NIPCR\"       \"Bed\"         \"Emp\"         \"EmpR\"       \n[16] \"EmpRT\"       \"Pri_Stu\"     \"Sec_Stu\"     \"Household\"   \"Household_R\"\n[21] \"NOIP\"        \"Pop_R\"       \"RSCG\"        \"Pop_T\"       \"Agri\"       \n[26] \"Service\"     \"Disp_Inc\"    \"RORP\"        \"ROREmp\"     \n\ncat(\"\\nFirst few rows of CSV:\\n\")\n\n\nFirst few rows of CSV:\n\nprint(head(csv_data))\n\n     County       City avg_wage deposite    FAI Gov_Rev Gov_Exp     GDP GDPPC\n1     Anhua     Yiyang    30544  10967.0 6831.7  456.72  2703.0 13225.0 14567\n2     Anren   Chenzhou    28058   4598.9 6386.1  220.57  1454.7  4941.2 12761\n3   Anxiang    Changde    31935   5517.2 3541.0  243.64  1779.5 12482.0 23667\n4   Baojing Hunan West    30843   2250.0 1005.4  192.59  1379.1  4087.9 14563\n5   Chaling    Zhuzhou    31251   8241.4 6508.4  620.19  1947.0 11585.0 20078\n6 Changning   Hengyang    28518  10860.0 7920.0  769.86  2631.6 19886.0 24418\n      GIO   Loan  NIPCR  Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household\n1  9276.9 3954.9 3528.3 2718 494.31 441.4 338.0  54.175  32.830     290.4\n2  4189.2 2555.3 3271.8  970 290.82 255.4  99.4  33.171  17.505     104.6\n3  5108.9 2806.9 7693.7 1931 336.39 270.5 205.9  19.584  17.819     148.1\n4  3623.5 1253.7 4191.3  927 195.17 145.6 116.4  19.249  11.831      73.2\n5  9157.7 4287.4 3887.7 1449 330.29 299.0 154.0  33.906  20.548     148.7\n6 37392.0 4242.8 9528.0 3605 548.61 415.1 273.7  81.831  44.485     211.2\n  Household_R NOIP Pop_R    RSCG Pop_T     Agri Service Disp_Inc      RORP\n1       234.5  101 670.3 5760.60 910.8 4942.253  5414.5    12373 0.7359464\n2       121.9   34 243.2 2386.40 388.7 2357.764  3814.1    16072 0.6256753\n3       135.4   53 346.0 3957.90 528.3 4524.410 14100.0    16610 0.6549309\n4        69.9   18 184.1  768.04 281.3 1118.561   541.8    13455 0.6544614\n5       139.4  106 301.6 4009.50 578.4 3793.550  5444.0    20461 0.5214385\n6       211.7  115 448.2 5220.40 816.3 6430.782 13074.6    20868 0.5490628\n     ROREmp\n1 0.8929619\n2 0.8782065\n3 0.8041262\n4 0.7460163\n5 0.9052651\n6 0.7566395\n\ncat(\"\\nCSV structure:\\n\")\n\n\nCSV structure:\n\nstr(csv_data)\n\n'data.frame':   88 obs. of  29 variables:\n $ County     : chr  \"Anhua\" \"Anren\" \"Anxiang\" \"Baojing\" ...\n $ City       : chr  \"Yiyang\" \"Chenzhou\" \"Changde\" \"Hunan West\" ...\n $ avg_wage   : int  30544 28058 31935 30843 31251 28518 54540 28597 33580 33099 ...\n $ deposite   : num  10967 4599 5517 2250 8241 ...\n $ FAI        : num  6832 6386 3541 1005 6508 ...\n $ Gov_Rev    : num  457 221 244 193 620 ...\n $ Gov_Exp    : num  2703 1455 1780 1379 1947 ...\n $ GDP        : num  13225 4941 12482 4088 11585 ...\n $ GDPPC      : int  14567 12761 23667 14563 20078 24418 88656 10132 17026 18714 ...\n $ GIO        : num  9277 4189 5109 3624 9158 ...\n $ Loan       : num  3955 2555 2807 1254 4287 ...\n $ NIPCR      : num  3528 3272 7694 4191 3888 ...\n $ Bed        : int  2718 970 1931 927 1449 3605 3310 582 2170 2179 ...\n $ Emp        : num  494 291 336 195 330 ...\n $ EmpR       : num  441 255 270 146 299 ...\n $ EmpRT      : num  338 99.4 205.9 116.4 154 ...\n $ Pri_Stu    : num  54.2 33.2 19.6 19.2 33.9 ...\n $ Sec_Stu    : num  32.8 17.5 17.8 11.8 20.5 ...\n $ Household  : num  290.4 104.6 148.1 73.2 148.7 ...\n $ Household_R: num  234.5 121.9 135.4 69.9 139.4 ...\n $ NOIP       : int  101 34 53 18 106 115 214 17 55 70 ...\n $ Pop_R      : num  670 243 346 184 302 ...\n $ RSCG       : num  5761 2386 3958 768 4010 ...\n $ Pop_T      : num  911 389 528 281 578 ...\n $ Agri       : num  4942 2358 4524 1119 3794 ...\n $ Service    : num  5414 3814 14100 542 5444 ...\n $ Disp_Inc   : int  12373 16072 16610 13455 20461 20868 183252 12379 14595 15603 ...\n $ RORP       : num  0.736 0.626 0.655 0.654 0.521 ...\n $ ROREmp     : num  0.893 0.878 0.804 0.746 0.905 ...\n\n# 3. IDENTIFY COMMON COLUMNS FOR JOINING\n# Find potential common columns\nshapefile_cols &lt;- names(shp_file)\ncsv_cols &lt;- names(csv_data)\n\n# Look for common column names\ncommon_cols &lt;- intersect(shapefile_cols, csv_cols)\ncat(\"\\n=== POTENTIAL JOIN COLUMNS ===\\n\")\n\n\n=== POTENTIAL JOIN COLUMNS ===\n\nif(length(common_cols) &gt; 0) {\n  cat(\"Common columns found:\", paste(common_cols, collapse = \", \"), \"\\n\")\n} else {\n  cat(\"No common column names found. Looking for similar patterns...\\n\")\n  \n  # Check for columns that might contain similar data (like ID, code, etc.)\n  possible_id_cols_shp &lt;- shapefile_cols[grepl(\"id|ID|code|Code|name|Name\", shapefile_cols)]\n  possible_id_cols_csv &lt;- csv_cols[grepl(\"id|ID|code|Code|name|Name\", csv_cols)]\n  \n  cat(\"Possible ID columns in shapefile:\", paste(possible_id_cols_shp, collapse = \", \"), \"\\n\")\n  cat(\"Possible ID columns in CSV:\", paste(possible_id_cols_csv, collapse = \", \"), \"\\n\")\n}\n\nCommon columns found: County \n\n# 4. MANUAL COLUMN SELECTION FOR JOINING\n# Replace these with your actual column names based on the output above\nshapefile_join_col &lt;- \"OBJECTID\"  # Change this to your shapefile's join column\ncsv_join_col &lt;- \"ID\"              # Change this to your CSV's join column\n\n# Verify the columns exist\nif(shapefile_join_col %in% names(shp_file) && csv_join_col %in% names(csv_data)) {\n  cat(\"\\nJoining using:\", shapefile_join_col, \"(shapefile) and\", csv_join_col, \"(CSV)\\n\")\n  \n  # 5. DATA CLEANING\n  csv_data_clean &lt;- csv_data %&gt;%\n    mutate(across(where(is.character), as.factor)) %&gt;%\n    drop_na(all_of(csv_join_col))  # Remove rows with missing join key\n  \n  # 6. JOIN THE DATA\n  spatial_joined &lt;- shp_file %&gt;%\n    left_join(csv_data_clean, by = setNames(csv_join_col, shapefile_join_col))\n  \n  cat(\"\\n=== AFTER JOINING ===\\n\")\n  cat(\"New data structure:\\n\")\n  print(spatial_joined)\n  cat(\"\\nNew column names:\\n\")\n  print(names(spatial_joined))\n  \n  # 7. BASIC MAPPING\n  # Find numeric columns for mapping\n  numeric_cols &lt;- names(spatial_joined)[sapply(spatial_joined, is.numeric)]\n  cat(\"\\nNumeric columns available for mapping:\", paste(numeric_cols, collapse = \", \"), \"\\n\")\n  \n  if(length(numeric_cols) &gt; 0) {\n    # Create a simple map using the first numeric column\n    map_variable &lt;- numeric_cols[1]\n    \n    map1 &lt;- tm_shape(spatial_joined) +\n      tm_polygons(map_variable,\n                  style = \"quantile\",\n                  palette = \"Blues\",\n                  title = map_variable) +\n      tm_layout(main.title = paste(\"Map of\", map_variable),\n                main.title.position = \"center\")\n    \n    print(map1)\n    \n    # 8. INTERACTIVE MAP\n    interactive_map &lt;- leaflet() %&gt;%\n      addTiles() %&gt;%\n      addPolygons(data = spatial_joined,\n                  weight = 1,\n                  color = \"black\",\n                  fillColor = ~colorQuantile(\"YlOrRd\", spatial_joined[[map_variable]])(spatial_joined[[map_variable]]),\n                  fillOpacity = 0.7,\n                  popup = ~paste(\"Value:\", spatial_joined[[map_variable]]))\n    \n    print(interactive_map)\n  }\n  \n} else {\n  cat(\"\\n=== ERROR: JOIN COLUMNS NOT FOUND ===\\n\")\n  if(!shapefile_join_col %in% names(shp_file)) {\n    cat(\"Column\", shapefile_join_col, \"not found in shapefile.\\n\")\n  }\n  if(!csv_join_col %in% names(csv_data)) {\n    cat(\"Column\", csv_join_col, \"not found in CSV.\\n\")\n  }\n  cat(\"Available shapefile columns:\", paste(names(shp_file), collapse = \", \"), \"\\n\")\n  cat(\"Available CSV columns:\", paste(names(csv_data), collapse = \", \"), \"\\n\")\n}\n\n\n=== ERROR: JOIN COLUMNS NOT FOUND ===\nColumn OBJECTID not found in shapefile.\nColumn ID not found in CSV.\nAvailable shapefile columns: NAME_2, ID_3, NAME_3, ENGTYPE_3, Shape_Leng, Shape_Area, County, geometry \nAvailable CSV columns: County, City, avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, NIPCR, Bed, Emp, EmpR, EmpRT, Pri_Stu, Sec_Stu, Household, Household_R, NOIP, Pop_R, RSCG, Pop_T, Agri, Service, Disp_Inc, RORP, ROREmp \n\n# 9. ALTERNATIVE: IF NO COMMON COLUMNS, SHOW SEPARATE MAPS\nif(!exists(\"spatial_joined\")) {\n  cat(\"\\nCreating separate maps since join wasn't possible...\\n\")\n  \n  # Map of just the shapefile\n  tm_shape(shp_file) +\n    tm_polygons() +\n    tm_layout(title = \"Shapefile Geometry\")\n  \n  # If CSV has spatial coordinates, you could create a point map\n  if(any(grepl(\"lat|long|x|y\", names(csv_data), ignore.case = TRUE))) {\n    coords_cols &lt;- names(csv_data)[grepl(\"lat|long|x|y\", names(csv_data), ignore.case = TRUE)]\n    cat(\"Potential coordinate columns in CSV:\", paste(coords_cols, collapse = \", \"), \"\\n\")\n  }\n}\n\n\nCreating separate maps since join wasn't possible...\n\n\nPotential coordinate columns in CSV: County, City, Gov_Exp \n\n# 10. CREATE OUTPUT DIRECTORY\nif(!dir.exists(\"output\")) {\n  dir.create(\"output\")\n}\n\n# Save the joined data if it exists\nif(exists(\"spatial_joined\")) {\n  st_write(spatial_joined, \"output/joined_data.shp\", delete_layer = TRUE)\n  cat(\"\\nJoined data saved to output/joined_data.shp\\n\")\n}\n\ncat(\"\\n=== ANALYSIS COMPLETED ===\\n\")\n\n\n=== ANALYSIS COMPLETED ==="
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html",
    "title": "Hands-on Exercise 5a",
    "section": "",
    "text": "# Load required packages\nif (!requireNamespace(\"pacman\", quietly = TRUE)) install.packages(\"pacman\")\npacman::p_load(sf, spdep, tmap, tidyverse)\n\n# --------------------------------------------------\n# 1. Read spatial data (Hunan county‐level shapefile)\n# --------------------------------------------------\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\edithting\\ISSS626\\Hands-on_Ex\\Hands-on_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n# Check\nprint(hunan)\n\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3 Shape_Leng Shape_Area    County\n1   Changde 21098   Anxiang      County   1.869074 0.10056190   Anxiang\n2   Changde 21100   Hanshou      County   2.360691 0.19978745   Hanshou\n3   Changde 21101    Jinshi County City   1.425620 0.05302413    Jinshi\n4   Changde 21102        Li      County   3.474325 0.18908121        Li\n5   Changde 21103     Linli      County   2.289506 0.11450357     Linli\n6   Changde 21104    Shimen      County   4.171918 0.37194707    Shimen\n7  Changsha 21109   Liuyang County City   4.060579 0.46016789   Liuyang\n8  Changsha 21110 Ningxiang      County   3.323754 0.26614198 Ningxiang\n9  Changsha 21111 Wangcheng      County   2.292093 0.13049161 Wangcheng\n10 Chenzhou 21112     Anren      County   2.240739 0.13343936     Anren\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\nst_geometry_type(hunan)\n\n [1] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON\n[10] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON\n[19] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON\n[28] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON\n[37] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON\n[46] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON\n[55] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON\n[64] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON\n[73] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON\n[82] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON\n18 Levels: GEOMETRY POINT LINESTRING POLYGON MULTIPOINT ... TRIANGLE\n\nst_crs(hunan)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n# --------------------------------------------------\n# 2. Read aspatial CSV data (development indicators)\n# --------------------------------------------------\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nglimpse(hunan2012)\n\nRows: 88\nColumns: 29\n$ County      &lt;chr&gt; \"Anhua\", \"Anren\", \"Anxiang\", \"Baojing\", \"Chaling\", \"Changn…\n$ City        &lt;chr&gt; \"Yiyang\", \"Chenzhou\", \"Changde\", \"Hunan West\", \"Zhuzhou\", …\n$ avg_wage    &lt;dbl&gt; 30544, 28058, 31935, 30843, 31251, 28518, 54540, 28597, 33…\n$ deposite    &lt;dbl&gt; 10967.0, 4598.9, 5517.2, 2250.0, 8241.4, 10860.0, 24332.0,…\n$ FAI         &lt;dbl&gt; 6831.7, 6386.1, 3541.0, 1005.4, 6508.4, 7920.0, 33624.0, 1…\n$ Gov_Rev     &lt;dbl&gt; 456.72, 220.57, 243.64, 192.59, 620.19, 769.86, 5350.00, 1…\n$ Gov_Exp     &lt;dbl&gt; 2703.0, 1454.7, 1779.5, 1379.1, 1947.0, 2631.6, 7885.5, 11…\n$ GDP         &lt;dbl&gt; 13225.0, 4941.2, 12482.0, 4087.9, 11585.0, 19886.0, 88009.…\n$ GDPPC       &lt;dbl&gt; 14567, 12761, 23667, 14563, 20078, 24418, 88656, 10132, 17…\n$ GIO         &lt;dbl&gt; 9276.90, 4189.20, 5108.90, 3623.50, 9157.70, 37392.00, 513…\n$ Loan        &lt;dbl&gt; 3954.90, 2555.30, 2806.90, 1253.70, 4287.40, 4242.80, 4053…\n$ NIPCR       &lt;dbl&gt; 3528.3, 3271.8, 7693.7, 4191.3, 3887.7, 9528.0, 17070.0, 3…\n$ Bed         &lt;dbl&gt; 2718, 970, 1931, 927, 1449, 3605, 3310, 582, 2170, 2179, 1…\n$ Emp         &lt;dbl&gt; 494.310, 290.820, 336.390, 195.170, 330.290, 548.610, 670.…\n$ EmpR        &lt;dbl&gt; 441.4, 255.4, 270.5, 145.6, 299.0, 415.1, 452.0, 127.6, 21…\n$ EmpRT       &lt;dbl&gt; 338.0, 99.4, 205.9, 116.4, 154.0, 273.7, 219.4, 94.4, 174.…\n$ Pri_Stu     &lt;dbl&gt; 54.175, 33.171, 19.584, 19.249, 33.906, 81.831, 59.151, 18…\n$ Sec_Stu     &lt;dbl&gt; 32.830, 17.505, 17.819, 11.831, 20.548, 44.485, 39.685, 7.…\n$ Household   &lt;dbl&gt; 290.4, 104.6, 148.1, 73.2, 148.7, 211.2, 300.3, 76.1, 139.…\n$ Household_R &lt;dbl&gt; 234.5, 121.9, 135.4, 69.9, 139.4, 211.7, 248.4, 59.6, 110.…\n$ NOIP        &lt;dbl&gt; 101, 34, 53, 18, 106, 115, 214, 17, 55, 70, 44, 84, 74, 17…\n$ Pop_R       &lt;dbl&gt; 670.3, 243.2, 346.0, 184.1, 301.6, 448.2, 475.1, 189.6, 31…\n$ RSCG        &lt;dbl&gt; 5760.60, 2386.40, 3957.90, 768.04, 4009.50, 5220.40, 22604…\n$ Pop_T       &lt;dbl&gt; 910.8, 388.7, 528.3, 281.3, 578.4, 816.3, 998.6, 256.7, 45…\n$ Agri        &lt;dbl&gt; 4942.253, 2357.764, 4524.410, 1118.561, 3793.550, 6430.782…\n$ Service     &lt;dbl&gt; 5414.5, 3814.1, 14100.0, 541.8, 5444.0, 13074.6, 17726.6, …\n$ Disp_Inc    &lt;dbl&gt; 12373, 16072, 16610, 13455, 20461, 20868, 183252, 12379, 1…\n$ RORP        &lt;dbl&gt; 0.7359464, 0.6256753, 0.6549309, 0.6544614, 0.5214385, 0.5…\n$ ROREmp      &lt;dbl&gt; 0.8929619, 0.8782065, 0.8041262, 0.7460163, 0.9052651, 0.7…\n\n# --------------------------------------------------\n# 3. Join the attribute data to shapefile\n# --------------------------------------------------\nhunan &lt;- hunan %&gt;%\n  left_join(hunan2012, by = \"County\")  \n\n# --------------------------------------------------\n# 4. Visualising the development indicator (e.g. GDPPC)\n# --------------------------------------------------\n\nmap_equal &lt;- tm_shape(hunan) +\n  tm_polygons(\"GDPPC\",\n              style = \"equal\",\n              n = 5,\n              palette = \"Blues\",\n              title = \"GDPPC (equal)\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"GDPPC (Equal-interval)\")\n\nmap_quantile &lt;- tm_shape(hunan) +\n  tm_polygons(\"GDPPC\",\n              style = \"quantile\",\n              n = 5,\n              palette = \"Blues\",\n              title = \"GDPPC (quantile)\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"GDPPC (Quantile)\")\n\n# Arrange side by side\ntmap_arrange(map_equal, map_quantile, ncol = 2, asp = 1)\n\n\n\n\n\n\n\n# --------------------------------------------------\n# 5. Build spatial weights (contiguity)\n# --------------------------------------------------\n# Queen contiguity\nwm_q &lt;- poly2nb(hunan, queen = TRUE)\n\n# Summary\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n# Row‐standardised weights\nrswm_q &lt;- nb2listw(wm_q, style = \"W\", zero.policy = TRUE)\n\n# Inspect\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n# --------------------------------------------------\n# 6. Global Moran’s I\n# --------------------------------------------------\n# (a) Moran’s I test\nmi &lt;- moran.test(hunan$GDPPC, listw = rswm_q, zero.policy = TRUE, na.action = na.omit)\nprint(mi)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n# (b) Monte Carlo permutation test\nset.seed(1234)\nmi_mc &lt;- moran.mc(hunan$GDPPC, listw = rswm_q, nsim = 999, zero.policy = TRUE, na.action = na.omit)\nprint(mi_mc)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n# Visualise simulated Moran’s I\nhist(mi_mc$res, breaks = 20, main = \"Simulated Moran's I\", xlab = \"Moran's I\")\nabline(v = mi_mc$statistic, col = \"red\", lwd = 2)\n\n\n\n\n\n\n\n# (Optional) use ggplot2 for nicer histogram\nlibrary(ggplot2)\ndf_mi &lt;- data.frame(sim = mi_mc$res)\nggplot(df_mi, aes(sim)) +\n  geom_histogram(bins = 30, fill = \"lightblue\", color = \"grey30\") +\n  geom_vline(xintercept = mi_mc$statistic, color = \"red\", size = 1.2) +\n  labs(title = \"Monte Carlo distribution of Moran's I\",\n       x = \"Simulated Moran's I\", y = \"Count\")\n\n\n\n\n\n\n\n# --------------------------------------------------\n# 7. Global Geary’s C\n# --------------------------------------------------\n# (a) Geary’s C test\ngc &lt;- geary.test(hunan$GDPPC, listw = rswm_q, zero.policy = TRUE)\nprint(gc)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q   \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n# (b) Monte Carlo Geary’s C\nset.seed(1234)\ngc_mc &lt;- geary.mc(hunan$GDPPC, listw = rswm_q, nsim = 999, zero.policy = TRUE)\nprint(gc_mc)\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n# Histogram for Geary’s C\nhist(gc_mc$res, breaks = 20, main = \"Simulated Geary's C\", xlab = \"Geary's C\")\nabline(v = gc_mc$statistic, col = \"red\", lwd = 2)\n\n\n\n\n\n\n\n# --------------------------------------------------\n# 8. Spatial Correlogram (Moran’s I & Geary’s C)\n# --------------------------------------------------\n# (a) Moran’s I correlogram\nmi_corr &lt;- sp.correlogram(wm_q, hunan$GDPPC, order = 6, method = \"I\", style = \"W\")\nplot(mi_corr)\n\n\n\n\n\n\n\nprint(mi_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n# (b) Geary’s C correlogram\ngc_corr &lt;- sp.correlogram(wm_q, hunan$GDPPC, order = 6, method = \"C\", style = \"W\")\nplot(gc_corr)\n\n\n\n\n\n\n\nprint(gc_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n# --------------------------------------------------\n# 9. Save outputs\n# --------------------------------------------------\n# Save shapefile with attributes\nst_write(hunan, \"output/hunan_global_autocorr.shp\", delete_layer = TRUE)\n\nWriting layer `hunan_global_autocorr' to data source \n  `output/hunan_global_autocorr.shp' using driver `ESRI Shapefile'\nWriting 88 features with 35 fields and geometry type Polygon.\n\n# Save tmap as image (choose one of the maps)\ntmap_save(map_quantile, filename = \"output/hunan_GDPPC_map.png\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html",
    "title": "Hands-on Exercise 5b",
    "section": "",
    "text": "# Load required libraries\nif (!requireNamespace(\"pacman\", quietly = TRUE)) install.packages(\"pacman\")\npacman::p_load(sf, spdep, tmap, tidyverse)\n\n# 1. Read the shapefile\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\edithting\\ISSS626\\Hands-on_Ex\\Hands-on_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n# (Alternatively, st_read(\"data/geospatial/Hunan.shp\") )\n\n# 2. Read the CSV file\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n# 3. Join the CSV data to the spatial object\nhunan &lt;- left_join(hunan, hunan2012, by = \"County\")\n\n# Optionally select or reorder columns\nhunan &lt;- hunan %&gt;%\n  select(1:4, 7, everything())\n\n# 4. Create contiguity-based spatial weights (Queen criterion)\nwm_q &lt;- poly2nb(hunan, queen = TRUE)\nrswm_q &lt;- nb2listw(wm_q, style = \"W\", zero.policy = TRUE)\n\n# 5. Compute local Moran’s I for a variable\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\n\ncolnames(localMI)\n\n[1] \"Ii\"             \"E.Ii\"           \"Var.Ii\"         \"Z.Ii\"          \n[5] \"Pr(z != E(Ii))\"\n\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n# 6. Attach the resulting local Moran’s I results back to the spatial object\npval_col &lt;- grep(\"^Pr\", colnames(localMI), value = TRUE)\n\n# Rename p-value column safely\nnames(localMI)[names(localMI) == \"Pr(z != E(Ii))\"] &lt;- \"Pr.Ii\"\n\n# Combine with spatial data\nhunan.localMI &lt;- cbind(hunan, localMI)\n\n# Check column names\ncolnames(hunan.localMI)\n\n [1] \"NAME_2\"         \"ID_3\"           \"NAME_3\"         \"ENGTYPE_3\"     \n [5] \"County\"         \"Shape_Leng\"     \"Shape_Area\"     \"City\"          \n [9] \"avg_wage\"       \"deposite\"       \"FAI\"            \"Gov_Rev\"       \n[13] \"Gov_Exp\"        \"GDP\"            \"GDPPC\"          \"GIO\"           \n[17] \"Loan\"           \"NIPCR\"          \"Bed\"            \"Emp\"           \n[21] \"EmpR\"           \"EmpRT\"          \"Pri_Stu\"        \"Sec_Stu\"       \n[25] \"Household\"      \"Household_R\"    \"NOIP\"           \"Pop_R\"         \n[29] \"RSCG\"           \"Pop_T\"          \"Agri\"           \"Service\"       \n[33] \"Disp_Inc\"       \"RORP\"           \"ROREmp\"         \"Ii\"            \n[37] \"E.Ii\"           \"Var.Ii\"         \"Z.Ii\"           \"Pr.z....E.Ii..\"\n[41] \"geometry\"      \n\n# Should include \"Pr.Ii\"\n\n### --- Section 7: Local Moran’s I and significance map ---\n\n# Compute local Moran’s I\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\n\n# Attach results to hunan\nhunan.localMI &lt;- cbind(hunan, localMI)\n\n# Rename the messy p-value column \"Pr(z != E(Ii))\" → \"Pr.Ii\"\nhunan.localMI &lt;- hunan.localMI %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n# Check result\ncolnames(hunan.localMI)\n\n [1] \"NAME_2\"      \"ID_3\"        \"NAME_3\"      \"ENGTYPE_3\"   \"County\"     \n [6] \"Shape_Leng\"  \"Shape_Area\"  \"City\"        \"avg_wage\"    \"deposite\"   \n[11] \"FAI\"         \"Gov_Rev\"     \"Gov_Exp\"     \"GDP\"         \"GDPPC\"      \n[16] \"GIO\"         \"Loan\"        \"NIPCR\"       \"Bed\"         \"Emp\"        \n[21] \"EmpR\"        \"EmpRT\"       \"Pri_Stu\"     \"Sec_Stu\"     \"Household\"  \n[26] \"Household_R\" \"NOIP\"        \"Pop_R\"       \"RSCG\"        \"Pop_T\"      \n[31] \"Agri\"        \"Service\"     \"Disp_Inc\"    \"RORP\"        \"ROREmp\"     \n[36] \"Ii\"          \"E.Ii\"        \"Var.Ii\"      \"Z.Ii\"        \"Pr.Ii\"      \n[41] \"geometry\"   \n\n# Map of Local Moran’s I\nmap_Ii &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\",\n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"Local Moran’s I\") +\n  tm_borders(alpha = 0.5)\n\n# Map of p-values\nmap_p &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\",\n          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette = \"-Blues\",\n          title = \"p-value of Local Moran’s I\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(map_Ii, map_p, asp = 1, ncol = 2)\n\n\n\n\n\n\n\n### --- Section 8: LISA cluster map (High-High, Low-Low, etc.) ---\n\n# Compute spatial lag of GDPPC\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\n\n# Standardize GDPPC and lag\nz &lt;- scale(hunan.localMI$GDPPC)[,1]\nlag_z &lt;- scale(hunan$lag_GDPPC)[,1]\n\n# Significance level\nsignif_level &lt;- 0.05\n\n# Identify significant areas\nhunan.localMI$quad_sig &lt;- NA\nhunan.localMI$quad_sig[z &gt;= 0 & lag_z &gt;= 0 & hunan.localMI$Pr.Ii &lt;= signif_level] &lt;- \"High-High\"\nhunan.localMI$quad_sig[z &lt;= 0 & lag_z &lt;= 0 & hunan.localMI$Pr.Ii &lt;= signif_level] &lt;- \"Low-Low\"\nhunan.localMI$quad_sig[z &gt;= 0 & lag_z &lt;= 0 & hunan.localMI$Pr.Ii &lt;= signif_level] &lt;- \"High-Low\"\nhunan.localMI$quad_sig[z &lt;= 0 & lag_z &gt;= 0 & hunan.localMI$Pr.Ii &lt;= signif_level] &lt;- \"Low-High\"\nhunan.localMI$quad_sig[is.na(hunan.localMI$quad_sig)] &lt;- \"Not Significant\"\n\n# Convert to factor for mapping\nhunan.localMI$quad_sig &lt;- factor(hunan.localMI$quad_sig,\n                                 levels = c(\"High-High\", \"Low-Low\", \"High-Low\", \"Low-High\", \"Not Significant\"))\n\n# LISA cluster map\ntm_shape(hunan.localMI) +\n  tm_fill(\"quad_sig\",\n          palette = c(\"red\", \"blue\", \"orange\", \"lightblue\", \"grey80\"),\n          title = \"LISA Cluster Map\") +\n  tm_borders(alpha = 0.5)"
  }
]